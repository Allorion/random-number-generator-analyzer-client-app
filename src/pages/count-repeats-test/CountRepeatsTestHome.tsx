import React, {FC} from "react";
import {Button, Container, Paper, Table, TableBody, TableCell, TableHead, TableRow} from "@mui/material";
import {useNavigate} from "react-router-dom";

interface IProps {

}

const CountRepeatsTestHome: FC<IProps> = ({}) => {

    const navigate = useNavigate()

    return (
        <React.Fragment>
            <header>
                <h1 className={'gost'}>Тест "Подсчет байтов"</h1>
                <Button variant={'contained'} color={'primary'}
                        onClick={() => navigate('/count-repeats-test/generator-analysis/')}>
                    Анализировать сгенерированную последовательность
                </Button>
            </header>
            <main>
                <Container>
                    <Paper className={'container-info'}>
                        <p className={'gost'}>Тест “Подсчет байтов” предназначен для проверки равномерности
                            распределения байтов в битовой последовательности, сгенерированной генератором случайных
                            чисел (ГСЧ).</p>
                        <h2 className={'gost'}>Принцип теста</h2>
                        <p className={'gost'}>Принцип теста заключается в следующем:</p>
                        <ol className={'gost'}>
                            <li className={'gost'}>Из битовой последовательности формируются байты, состоящие из восьми
                                битов каждый.
                            </li>
                            <li className={'gost'}>Для каждого байта определяется его десятичное значение от 0 до 255.
                            </li>
                            <li className={'gost'}>Подсчитывается, сколько раз встречается каждое десятичное значение
                                среди всех байтов.
                            </li>
                            <li className={'gost'}>Строится гистограмма, на которой по оси X откладываются десятичные
                                значения байтов, а по оси Y - количество их повторений.
                            </li>
                            <li className={'gost'}>Анализируется, насколько равномерно распределены байты по десятичным
                                значениям. Чем ближе гистограмма к прямой линии, тем лучше равномерность.
                            </li>
                        </ol>
                        <p className={'gost'}>Тест имеет также второй режим - режим распределения, в котором
                            анализируется не само количество повторений байтов, а количество различных значений
                            повторений. В этом режиме выполняются следующие шаги:</p>
                        <ol className={'gost'}>
                            <li className={'gost'}>Из битовой последовательности формируются байты и подсчитываются их
                                десятичные значения, как в первом режиме.
                            </li>
                            <li className={'gost'}>Для каждого количества повторений байтов определяется, сколько раз
                                оно встречается среди всех десятичных значений. Например, если байт со значением 0
                                повторяется 10 раз, а байт со значением 1 повторяется 12 раз, то количество повторений
                                10 встречается один раз, а количество повторений 12 встречается один раз.
                            </li>
                            <li className={'gost'}>Строится гистограмма, на которой по оси X откладываются количества
                                повторений байтов, а по оси Y - количество различных десятичных значений с таким
                                количеством повторений.
                            </li>
                            <li className={'gost'}>Анализируется, насколько равномерно распределены количества
                                повторений байтов. Чем ближе гистограмма к прямой линии, тем лучше равномерность.
                            </li>
                        </ol>
                    </Paper>
                </Container>
            </main>
        </React.Fragment>
    )
};

export default CountRepeatsTestHome;